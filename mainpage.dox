/** \mainpage Astrodynamics Toolkit

<h2>Introduction</h2>
<p>
	The Astrodynamics Toolkit (not a very original name, I know) is a collection of C++ functions and libraries that facilitate fast and accurate trajectory design. Originally, these functions and libraries were all implemented within MATLAB, but they have been translated to C++ for several reasons. First, C++ provides higher levels of numerical accuracy. Although not a huge improvement over MATLAB, C++ does often offer several orders of magnitude improvement in accuracy. Second, C++ performs the complex math required to propagate trajectories <i>much</i> faster than MATLAB. This reason alone is sufficient to motivate any developer to shift from MATLAB to C++ (or C). Finally, MATLAB is proprietary software; a license is required to download and install the program. Licenses can cost several thousands of dollars, and C++ is free... You see why we've moved away from MATLAB.
</p>

<p>
	This toolkit contains three different types of objects. The first are data objects that provide containers for information that is typically grouped together. For example, the trajectory object stores states along a trajectory, times associated with each state, the type of system the trajectory was propagated in, etc. All of this data is packed into one bundle and can easily be passed between functions that "operate" on the data, such as numerical integrators and correction processes. Speaking of which, the second type of object contained in this toolkit is an "engine," like the simulation engine and corrector engine. These objects' primary purpose is to generate or modify data and they are complex enough to justify being an object in and of themselves. This complexity means engines store relavent data like integration tolerances, lists of event functions, or sets of simpler data objects like trajectories. The engines then operate on and with this data to create new data objects. The final type of object is a ``library'' of sorts, which contains only functions and is not really an object at all. These files, like the utilities and calculations libraries, are not created as objects, their functions are simply included and called in other functions. Computations such as Equations of Motion (EOMs) are included in these types of libraries.
</p>

<h2>Supported Systems and Models</h2>
<ul>
	<li>Circular Restricted 3-Body Problem (CR3BP)</li>
	<li>Bi-Circular Restricted 4-Body Problem, rotating coordinates (BCR4BPR)</li>
</ul>

<h2>Typical Use</h2>
<h3>Generating a trajectory</h3>
Since this toolkit is primarily for propagating and investigating trajectories, we begin with an explanation of how to generate one. First, choose the system you wish to use. For this example, we'll use the CR3BP in the Earth-Moon system. The basic process is this: define a system, then create an engine for that system by providing it with the system data object. Next, define a set of initial conditions and run the simulation for a specific amount of time. In the example below, we integrate ICs that will produce an L1 northern halo with a period of 2.77 non-dimensional time units. Finally, retrieve the inegrated trajectory from the simulation engine.
<pre>
	adtk_cr3bp_sys_data sys("earth", "moon");			// Create system
	adtk_simulation_engine sim(&sys);					// Create engine to integrate in sys
	double ic[] = {0.8258, 0, 0.08, 0, 0.1937, 0};		// Define initial conditions
	sim.runSim(ic, 2.77);								// Run the simulation
	adtk_cr3bp_traj traj = sim.getCR3BPTraj(); 			// Retrieve the simulated trajectory
</pre>
We can save the <code>traj</code> object to a <code>.mat</code> file using the <code>saveToMat</code> function, where the trajectory can easily be visualized and manipulated. The output MATLAB file is produced in such a way that it can easily be imported as a data structure and used with the pre-existing, afore-mentioned MATLAB tools.
*/