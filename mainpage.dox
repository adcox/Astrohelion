/** \mainpage Trajectory Propagation and Analysis Toolkit

<h2>Introduction</h2>
<p>
	The Trajectory Propagation and Analysis Toolkit (TPAT) is a collection of C++ functions and libraries that facilitate fast and accurate trajectory design.
</p>

<p>
	Originally, these functions and libraries were all implemented within MATLAB, but they have been translated to C++ for several reasons. First, C++ provides higher levels of numerical accuracy. Although not a huge improvement over MATLAB, C++ does often offer several orders of magnitude improvement in accuracy. Second, C++ performs the complex math required to propagate trajectories <i>much</i> faster than MATLAB. This reason alone is sufficient to motivate any developer to shift from MATLAB to C++ (or C). Finally, MATLAB is proprietary software; a license is required to download and install the program. Licenses can cost several thousands of dollars, and C++ is free... You see why we've moved away from MATLAB.
</p>

<h2>Supported Systems and Models</h2>
This toolkit supports the following dynamical models
<ul>
	<li>
		Circular Restricted 3-Body Problem (CR3BP) - two primaries with spherically-
		symmetric gravity fields and a third, relatively massless body moving under the
		influence of the two primaries. The primaries orbit their barycenter in 
		circular orbits.
	</li>
	<li>
		Circular Restricted 3-Body Problem with Velocity-Pointing Low Thrust (CR3BP-LTVP) - 
		makes all the same assumptions as the CR3BP but adds a constant-thrust system to P3.
		The thrust vector is always parallel to the velocity vector and the magnitude is constant.
		Mass varies over time.
	</li>
	<li>
		Bi-Circular Restricted 4-Body Problem, rotating coordinates (BCR4BPR) - three
		primaries with spherically-symmetric gravity fields and a fourth, relatively
		massless body moving under the influence of the three primaries. The two 
		smaller primaries orbit their barycenter like the CR3BP, and their barycenter orbits the total system barycenter in a circular path.
	</li>
</ul>

<h2>Engines</h2>
This toolkit contains several different "engines" that either propagate or analyze trajectories.

<b>Simulator</b><br>
The simulation engine (<tt>tpat_simulation_engine</tt>) takes an initial state, time-of-flight, and (optionally) an initial time and numerically integrates the initial conditions to produce a trajectory. Although no mechanism exists to constrain these trajectories, the user can tell the simulator to watch for events such as plane crossings, apse crossings, or crash events. The simulator can be configured to end integration when an event occurs, or it can be allowed to continue.

<b>Corrector</b><br>
Like the simulation engine, the correction engine (<tt>tpat_correction_engine</tt>) takes a set of initial conditions and integrates them. The corrector takes a nodeset as input and integrates one arc for every node; the node's state is used as the initial condition, the node's time-of-flight dictates the length of the arc, and any extra parameters stored in the node are interpreted via the dynamic model associated with the nodeset. After integrating from all nodes in the nodeset, the corrector evaluates a set of constraint functions. If all constraint functions are minimized (less than some \f$\epsilon\f$), the process is complete. This is rarely the case, however. If the constraints are not met, the engine makes adjustments to the initial states, times-of-flight, and other parameters, and then re-integrates. The engine iterates through this process until either all the constraints are met or a maximum number of iterations are met.

Other engines:
<ul>
	<li>
		Linear Motion Engine - Generate a trajectory using simplified linearized 
		equations of motion (EOMs). This engine currently only works for the CR3BP.
		Current implementations: <tt>tpat_linear_motion_engine</tt>
	</li>
	<li>
		Family Generator - Currently only implemented for CR3BP periodic orbits, this engine
		begins with an initial orbit and then uses natural parameter continuation to 
		evolve a family of trajectories. Current implementations: <tt>tpat_family_generator</tt>
	</li>
</ul>

<h2>Typical Use</h2>
<h3>Generating a trajectory</h3>
Since this toolkit is primarily for propagating and investigating trajectories, we begin with an explanation of how to generate one. First, choose the system you wish to use. For this example, we'll use the CR3BP in the Earth-Moon system. The basic process is this: define a system, then create an engine for that system by providing it with the system data object. Next, define a set of initial conditions and run the simulation for a specific amount of time. In the example below, we integrate ICs that will produce an L1 northern halo with a period of 2.77 non-dimensional time units. Finally, retrieve the inegrated trajectory from the simulation engine.
<pre>
	tpat_cr3bp_sys_data sys("earth", "moon");			// Create system
	tpat_simulation_engine sim(&sys);					// Create engine to integrate in sys
	double ic[] = {0.8258, 0, 0.08, 0, 0.1937, 0};		// Define initial conditions
	sim.runSim(ic, 2.77);								// Run the simulation
	tpat_cr3bp_traj traj = sim.getCR3BPTraj(); 			// Retrieve the simulated trajectory
</pre>
We can save the <code>traj</code> object to a <code>.mat</code> file using the <code>saveToMat</code> function, where the trajectory can easily be visualized and manipulated. The output MATLAB file is produced in such a way that it can easily be imported as a data structure and used with the pre-existing, afore-mentioned MATLAB tools.
*/