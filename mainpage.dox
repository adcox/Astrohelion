/** \mainpage Trajectory Propagation and Analysis Toolkit

<h2>Introduction</h2>
<p>
	The Trajectory Propagation and Analysis Toolkit (TPAT) is a collection of C++ functions and libraries that facilitate fast and accurate trajectory design.
	This toolkit contains three different types of objects. The first are data objects that provide containers for information that is typically grouped together. For example, the trajectory object stores states along a trajectory, times associated with each state, the type of system the trajectory was propagated in, etc. All of this data is packed into one bundle and can easily be passed between functions that "operate" on the data, such as numerical integrators and correction processes. Speaking of which, the second type of object contained in this toolkit is an "engine," like the simulation engine and corrector engine. These objects' primary purpose is to generate or modify data and they are complex enough to justify being an object in and of themselves. This complexity means engines store relavent data like integration tolerances, lists of event functions, or sets of simpler data objects like trajectories. The engines then operate on and with this data to create new data objects. The final type of object is a ``library'' of sorts, which contains only functions and is not really an object at all. These files, like the utilities and calculations libraries, are not created as objects, their functions are simply included and called in other functions. Computations such as Equations of Motion (EOMs) are included in these types of libraries.
</p>

<p>
	Originally, these functions and libraries were all implemented within MATLAB, but they have been translated to C++ for several reasons. First, C++ provides higher levels of numerical accuracy. Although not a huge improvement over MATLAB, C++ does often offer several orders of magnitude improvement in accuracy. Second, C++ performs the complex math required to propagate trajectories <i>much</i> faster than MATLAB. This reason alone is sufficient to motivate any developer to shift from MATLAB to C++ (or C). Finally, MATLAB is proprietary software; a license is required to download and install the program. Licenses can cost several thousands of dollars, and C++ is free... You see why we've moved away from MATLAB.
</p>

<h2>Supported Systems and Models</h2>
This toolkit supports the following dynamical models
<ul>
	<li>
		Circular Restricted 3-Body Problem (CR3BP) - two primaries with spherically-
		symmetric gravity fields and a third, relatively massless body moving under the
		influence of the two primaries. The primaries orbit their barycenter in 
		circular orbits.
	</li>
	<li>
		Bi-Circular Restricted 4-Body Problem, rotating coordinates (BCR4BPR) - three
		primaries with spherically-symmetric gravity fields and a fourth, relatively
		massless body moving under the influence of the three primaries. The two 
		smaller primaries orbit their barycenter like the CR3BP, and their barycenter orbits the total system barycenter in a circular path.
	</li>
</ul>

<h2>Data Objects</h2>
The following objects are used in the toolkit to store data. These objects are typically
required as input arguments or are returned by engine objects.
<ul>
	<li>
		Body Data - stores characteristics of a particular celestial body. Current
		implementations: <tt>tpat_body_data</tt>
	</li>
	<li>
		System Data - stores characteristic quantities and other system-specific data. This
		object is used to create trajectories and nodesets as well as initialize engines. Current implementations: <tt>tpat_cr3bp_sys_data</tt>, 
		<tt>tpat_bcr4bpr_sys_data</tt>.
	</li>
	<li>
		Trajectory - stores states along the trajectory, times along the path, and
		other system-specific values. Current implementations: <tt>tpat_cr3bp_traj</tt>,
		<tt>tpat_bcr4bpr_traj</tt>.
	</li>
	<li>
		Nodeset - represents a trajectory as a discrete set of nodes. The correction
		engine takes this type of object as an input and outputs a similar nodeset. Current
		implementations: <tt>tpat_cr3bp_nodeset</tt>, <tt>tpat_bcr4bpr_nodeset</tt>.
	</li>
</ul>

<h2>Engines</h2>
<ul>
	<li>
		Simulation Engine - Numerically a set of initial conditions in a specified 
		dynamical system according to the engine parameters. Current implementations: 
		<tt>tpat_simulation_engine</tt>
	</li>
	<li>
		Correction Engine - Correct a nodeset to be continuous (where specified) in one 
		of the dynamical systems. Corrections are made under a set of constraints. 
		Current implementations: <tt>tpat_correction_engine</tt>
	</li>
	<li>
		Linear Motion Engine - Generate a trajectory using simplified linearized 
		equations of motion (EOMs). This engine currently only works for the CR3BP.
		Current implementations: <tt>tpat_linear_motion_engine</tt>
	</li>
</ul>

<h2>Miscellaneous</h2>
<ul>
	<li>
		Common Numerical Constants - a header that contains useful numerical constants
		like <i>pi</i>, the astronomical constant <i>G</i>, etc. Current implementations:
		<tt>tpat_constants.hpp</tt>
	</li>
	<li>
		Exception Handling - Some functions and objects throw exceptions. These all derive from the base class <tt>tpat_exception</tt> and can be caught using
		either the base class or one of the more specific derived classes. Any other
		excpetions thrown are not intentional and should be reported as bugs.
	</li>
</ul>

<h2>Typical Use</h2>
<h3>Generating a trajectory</h3>
Since this toolkit is primarily for propagating and investigating trajectories, we begin with an explanation of how to generate one. First, choose the system you wish to use. For this example, we'll use the CR3BP in the Earth-Moon system. The basic process is this: define a system, then create an engine for that system by providing it with the system data object. Next, define a set of initial conditions and run the simulation for a specific amount of time. In the example below, we integrate ICs that will produce an L1 northern halo with a period of 2.77 non-dimensional time units. Finally, retrieve the inegrated trajectory from the simulation engine.
<pre>
	tpat_cr3bp_sys_data sys("earth", "moon");			// Create system
	tpat_simulation_engine sim(&sys);					// Create engine to integrate in sys
	double ic[] = {0.8258, 0, 0.08, 0, 0.1937, 0};		// Define initial conditions
	sim.runSim(ic, 2.77);								// Run the simulation
	tpat_cr3bp_traj traj = sim.getCR3BPTraj(); 			// Retrieve the simulated trajectory
</pre>
We can save the <code>traj</code> object to a <code>.mat</code> file using the <code>saveToMat</code> function, where the trajectory can easily be visualized and manipulated. The output MATLAB file is produced in such a way that it can easily be imported as a data structure and used with the pre-existing, afore-mentioned MATLAB tools.
*/