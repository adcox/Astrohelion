/** \page devNotes Developer Notes
\brief Information that will be useful for developers

<h2>Tested Platforms</h2>
This software has been tested on (and <i>should</i> work on) the following system platforms and architectures:
<ul>
	<li>Debian Linux Ubuntu/Mint 14.04 - AMD 64-bit </li>
	<li>Mac OS X 10.10.3 - Intel 64-bit</li>
</ul>

<h2>Software Dependencies</h2>
<p>Our software is dependent on a few libraries:</p>
<ul>
	<li>
		<a href="http://www.gnu.org/software/gsl/">GNU Science Library</a> (GSL): This library should be installed on your system and available to the compiler. The Makefile assumes all GSL headers and libraries are already in the search path. To compile with the GSL libraries, use the <tt>-lgsl</tt> and <tt>-lgslcblas</tt> compiler flags
	</li>
	<li>
		<a href="http://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen</a>: A matrix and linear algebra library. No installation is needed; this library is included with the source code.
	</li>
	<li>
		<a href="http://sourceforge.net/projects/matio/">Mat I/O Library</a>: This library provides functions to convert from data types in C/C++ to MATLAB binary *.mat files. For testing, the library has been configured, built, and installed without specifying any non-default flags. This prevents the library from outputing version 7.3 format Mat files, but older versions work fine. Note that this library has its own dependencies; see their documentation for more details, but note that we didn't have to install anything extra; all dependencies were already included on our system.
		<ul>
			<li> Note on linux: Had to add /usr/local/lib to LD_LIBRARY_PATH and export in .bashrc </li>
		</ul>
	</li>
	<li>
		<a href="http://naif.jpl.nasa.gov/naif/toolkit_C.html">NAIF SPICE</a>: This library 
		provides access to accurate ephemerides. To install, I downloaded the 64-bit tar.Z file 
		for OS X and ran the installation script. Spice doesn't install itself like other 
		libraries do, so I took the necessary steps to install it the usual way:
		<ul>
			<li> 
				Copy the header files from <code>include/</code> to <code>/usr/local/include/cspice</code> </li>
			<li> 
				Rename the library files to begin with "lib" so that C/C++ will link them appropriately. I then copied them to the <code>/usr/local/lib/</code> directory.
			</li>
			<li>
				Copy the executable binaries from the <code>exe/</code> directory into <code>/usr/local/bin/cspice/</code> and add a line to the <code>.bash_profile</code> configuration file: <code>PATH=$PATH:/usr/local/bin/cspice/</code> so that I can access these binary files from the command line.
			</li>
		</ul>
		To use SPICE functions, include the <code>SpiceUsr.h</code> header file, which is a sort of include-wrapper that includes all the relevant headers for SPICE routines. An API for the C toolkit can be found <a href="http://naif.jpl.nasa.gov/pub/naif/toolkit_docs/C/index.html">here</a>
	</li>
</ul>

<h2>To-Do List</h2>
<i>This has been moved to BitBucket's issue tracker</i>

<h2>Debugging</h2>
<h3>In General</h3>
First, open X11 from the Applications menu. Then, run the executable using the graphic debugging library:
<pre>
	ddd -display :0.0 simEngineTest
</pre>
For this to work, you must compile the executable with the debugging symbols; use the <code>-g</code> flag in the compiler. Alternatively, skip the GUI and run <code>gdb</code> from the terminal directly.

<h3>Checking for Dependency Issues</h3>
Run doxygen with the inheritance/dependency plots turned on (this is already set for this project).

<h3>Checking for Memory Leaks</h3>
Use valgrind to check for leaks:
<pre>
	valgrind --tool=memcheck --leak-check=yes simEngineTest
</pre>
On my Macbook, I've created a file at <code>~/.valgrindrc</code> which specifies arguments for valgrind so I don't have to type out the lengthy code above, I just type <code>valgrind simEngineTest</code>. I've also created a file called <code>valgrindIgnore.supp</code> with code to tell valgrind to suppress memory leaks that come from system libraries that I have no control over.

<h2>Coding Practice Notes</h2>
<h3>"Right Way" to include</h3>
Whether or not to include or use forward declaration:
<ul>
	<li> do nothing if: A makes no references at all to B </li>
	<li> do nothing if: The only reference to B is in a friend declaration </li>
	<li> forward declare B if: A contains a B pointer or reference: B* myb; </li>
	<li> forward declare B if: one or more functions has a B object/pointer/reference
	as a parementer, or as a return type: B MyFunction(B myb); </li>
	<li> #include "b.h" if: B is a parent class of A </li>
	<li> #include "b.h" if: A contains a B object: B myb; </li>
</ul>

Include Order (my convention:)
<ol>
	<li> Header file for this class </li>
	<li> Local header files - ones I've written, in alphabetical order </li>
	<li> Global header files, like string, vector, etc. </li>
</ol>

*/