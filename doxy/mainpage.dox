/** \mainpage Astrohelion

<h2>Welcome!</h2>

Astrohelion (Astro - heel - eon) is a set of C++ tools that facilitiate 
multi-body trajectory design. Specifically, analysis in the circular restricted 
three-body problem (CR3BP), the CR3BP with low-thrust (CR3BP-LT), and bi-circular 
restricted four-body problem (BC4BP) is supported.

<h2>Capabilities</h2>

So, what can Astrohelion do? There are several key functionalities:

<ul>
	<li> <strong>Numerical Integration</strong> Astrohelion leverages the ordinary 
		differential 
		equation (ODE) solvers in the GSL library to numerically integrate the 
		equations of motion associated with a few common multi-body astrodynamical 
		systems. This propagation is controlled by a <code>SimEngine</code> object that 
		possesses many of the same features as Matlab's ODE solvers, such as event 
		detection. The engine creates a trajectory object that can then be operated 
		on for further analysis.
	</li>
	<li> <strong>Differential Corrections</strong> Continuous trajectories may be 
		discretized into a 
		series of nodes, and constraints can be applied to the nodes, segments 
		between nodes, and the trajectory as a whole. A multiple shooting 
		differential corrections algorithm is then applied to the constrained 
		"arcset" with the goal of satisfying all constraints. The algorithm itself, 
		contained in the <code>MultShootEngine</code> object, is problem-independent and can be
		applied to CR3BP, CR3BP-LT, or BC4BP arcsets using the same set of commands.
	</li>
	<li> <strong>Continuation</strong> Once a desirable trajectory has been computed 
		(and possibly 
		corrected to meet certain constraints), continuation algorithms can be 
		applied to generate a continuous family of similar solutions. Both natural 
		parameter continuation (see <code>NatParamEngine</code>) and psuedo-arclength 
		continuation (see <code>PseudoArcEngine</code>) are avaiable, both of which are 
		agnostic to dynamical model.
	</li>
	<li> <strong>Export to File</strong> Trajectories are easily saved to file 
		in MATLAB binary format for further analysis or visualization.
	</li>
</ul>

<h2>Limitations</h2>

This software has been developed to support MS and PhD research. Thus, while the
tools are fully operational and have been tested fairly well, they are not as
flexible or extensible as they could be. Please submit feedback via issue reports
if you encounter problems so that we can continue to improve this software! 
However, note that we make no guarantee that we'll be able to offer support; this
software is provided as is, without any quality guarnatee.

<h2>Installation</h2>

The following steps describe a general installation process.

<ol>
	<li> Copy the <code>installDeps.sh</code> script into the main directory from the 
		build directory.
	</li>
	<li> Open installDeps.sh and set the <code>INSTALL_DIR</code>, 
		<code>CONFIG_DIR</code>, and <code>SPICE_DIR</code> 
		variables to point to locations you have write access to.
	</li>
	<li> Additionally, set the <code>SPK</code> and <code>TLS</code> variables 
		to the names of SPICE kernels you want to download to use for ephemeris data.
	</li>
	<li> Run the installation script, i.e., <code>sh installDeps.sh</code>. This 
		will download, build, and install the libraries required to run Astrohelion
	</li>
	<li> Copy makefile out of the build directory into the main directory and 
		adjust the <code>INSTALL_DIR</code> variable to point to the same 
		directory as the 
		<code>INSTALL_DIR</code> variable in <code>installDeps.sh</code>
	</li>
	<li> Compile the project source, i.e., run <code>make</code> </li>
	<li> Install the Astrohelion libriaries and headers, i.e., run 
		<code>make install</code>
	</li>
</ol>
<h2>Documentation</h2>

Astrohelion documentation is available at 
<a href="http://adcox.gitlab.io/Astrohelion">http://adcox.gitlab.io/Astrohelion/</a>. 
To build the latest documentation (which is stored in <code>docs/html<code>), 
run the command <code>make docs</code>. Document generation requires the 
<code>doxygen</code> and <code>graphviz</code> packages.

*/